# -*- coding: utf-8 -*-
"""Copy of Optimizing Workforce Allocation to Customer Demand

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ym9erterYEt6KXFxinMqLzsTLS0x9-4D

# **Optimizing Workforce Allocation to Customer Demand**

**Project MMA05**
"""

!pip install pulp
import pulp
import pandas as pd
from pulp import LpMinimize, LpProblem, LpVariable, lpSum
from google.colab import files
import io
from openpyxl import load_workbook
from openpyxl.styles import Font, PatternFill

def convert_time_to_minutes(time_obj):
    return time_obj.hour * 60 + time_obj.minute

def adjust_time_interval(start_minutes, end_minutes):
    if end_minutes < start_minutes:
        end_minutes += 24 * 60  # บวก 24 ชั่วโมงในกรณีที่ end_minutes น้อยกว่า start_minutes
    return start_minutes, end_minutes

#upload excel ข้างล่างได้เลย
print("กรุณาอัปโหลดไฟล์ Excel")
uploaded = files.upload()

for file_name in uploaded.keys():
    wages_df = pd.read_excel(io.BytesIO(uploaded[file_name]), sheet_name='cj')
    demands_df = pd.read_excel(io.BytesIO(uploaded[file_name]), sheet_name='dt')
    shifts_df = pd.read_excel(io.BytesIO(uploaded[file_name]), sheet_name='shift')
    time_intervals_df = pd.read_excel(io.BytesIO(uploaded[file_name]), sheet_name='time_interval')

wages_df.columns = wages_df.columns.str.strip()
demands_df.columns = demands_df.columns.str.strip()
shifts_df.columns = shifts_df.columns.str.strip()
time_intervals_df.columns = time_intervals_df.columns.str.strip()

# ตรวจสอบข้อมูล
print("ข้อมูลค่าแรงพนักงาน (Wage):")
print(wages_df.head())
print("\nข้อมูลความต้องการพนักงาน (Demand):")
print(demands_df.head())
print("\nข้อมูลกะทำงาน (Shift Time):")
print(shifts_df.head())
print("\nข้อมูลช่วงเวลา (Time Interval):")
print(time_intervals_df.head())


n = len(wages_df)
cj = wages_df['Wage'].tolist() #ค่าใช้จ่าย
T = len(time_intervals_df)
dt = demands_df['Demand_Employee'].tolist()

time_intervals = [
    adjust_time_interval(convert_time_to_minutes(start), convert_time_to_minutes(end))
    for start, end in zip(time_intervals_df['Start_time'], time_intervals_df['End_time'])
]

shift_times = [
    adjust_time_interval(convert_time_to_minutes(start), convert_time_to_minutes(end))
    for start, end in zip(shifts_df['Shift_start'], shifts_df['Shift_end'])
]

atj = []
for i in range(n):
    atj_row = []
    for t in range(T):
        if shift_times[i][0] <= time_intervals[t][0] and shift_times[i][1] >= time_intervals[t][1]:
            atj_row.append(1)
        else:
            atj_row.append(0)
    atj.append(atj_row)

#Minimize LP
problem = pulp.LpProblem("Workforce_Scheduling", pulp.LpMinimize)

#ตัวแปร xj
x = pulp.LpVariable.dicts("x", range(n), lowBound=0, cat='Integer')

# ค่าใช้จ่ายทั้งหมด (Minimize ∑(cj * xj))
problem += pulp.lpSum(cj[j] * x[j] for j in range(n))

# จำนวนพนักงานในกะต่างๆ ต้องเพียงพอต่อความต้องการในแต่ละกรอบเวลา (∑(atj * xj) >= dt)
for t in range(T):
    problem += pulp.lpSum(atj[j][t] * x[j] for j in range(n)) >= dt[t]
problem.solve()
results_df = pd.DataFrame({
    "Shift": [f"Shift {j + 1}" for j in range(n)],
    "Number of Employees": [x[j].varValue for j in range(n)],
    "Cost": [cj[j] * x[j].varValue for j in range(n)]
})

#############################
### ผลลัพธ์ ###
print("สถานะการแก้ปัญหา:", pulp.LpStatus[problem.status])
for j in range(n):
    print(f"จำนวนพนักงานที่ต้องการในกะ {j + 1}: {x[j].varValue}")
total_cost = pulp.value(problem.objective)
print("ค่าใช้จ่ายทั้งหมด:", total_cost)


##### output ออกมาเป็น Excel #####
results_df.loc["Total"] = ["Total", "", total_cost]
results_df.to_excel("scheduling_results.xlsx", index=False)

#################################
### ตกแต่ง excel ###
workbook = load_workbook("scheduling_results.xlsx")
sheet = workbook.active

font = Font(name='TH SarabunPSK', size=18)  # ใช้ฟอนต์ TH SarabunPSK ขนาด 18
fill_header = PatternFill(start_color='58B1FF', end_color='58B1FF', fill_type='solid') ### ใส่สีพื้นหลัง
fill_total = PatternFill(start_color='E3E3E3', end_color='E3E3E3', fill_type='solid')
fill_cost = PatternFill(start_color='FF5B59', end_color='FF5B59', fill_type='solid')
fill_default = PatternFill(start_color='FFFFFF', end_color='FFFFFF', fill_type='solid')

headers = ["Shift", "Number of Employees", "Cost"]
for col_num, header in enumerate(headers, start=1):
    cell = sheet.cell(row=1, column=col_num)
    cell.font = font
    cell.fill = fill_header

for row in range(2, len(results_df) + 2):
    for col in range(1, len(headers) + 1):
        cell = sheet.cell(row=row, column=col)
        cell.font = font
        if row == len(results_df) + 1:
            cell.fill = fill_total
            if col == 3:
                cell.fill = fill_cost
        else:
            cell.fill = fill_default
            if col == 3:
                cell.fill = fill_default

for col in range(1, len(headers) + 1):
    max_length = 0
    column = chr(64 + col)
    for row in range(1, len(results_df) + 2):
        cell_value = str(sheet.cell(row=row, column=col).value)
        max_length = max(max_length, len(cell_value))
    adjusted_width = max_length + 2
    sheet.column_dimensions[column].width = adjusted_width

workbook.save("scheduling_results.xlsx")
files.download("scheduling_results.xlsx")
###########################################################################
                        ############ เสร็จสิ้น  ############